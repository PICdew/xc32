# Don't let CTOR_LIST end up in sdata section.
CRTSTUFF_T_CFLAGS = -G 0

# Assemble startup files.
$(T)crti.o: $(srcdir)/config/mips/crti.asm $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \
	-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/mips/crti.asm

$(T)crtn.o: $(srcdir)/config/mips/crtn.asm $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \
	-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/mips/crtn.asm

LIB1ASMSRC = mips/mips16.S
LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \
	_m16eqsf2 _m16nesf2 _m16gtsf2 _m16gesf2 _m16lesf2 _m16ltsf2 \
	_m16fltsisf _m16fixsfsi \
	_m16adddf3 _m16subdf3 _m16muldf3 _m16divdf3 \
	_m16extsfdf2 _m16trdfsf2 \
	_m16eqdf2 _m16nedf2 _m16gtdf2 _m16gedf2 _m16ledf2 _m16ltdf2 \
	_m16fltsidf _m16fixdfsi \
	_m16retsf _m16retdf \
	_m16retsc _m16retdc \
	_m16stub1 _m16stub2 _m16stub5 _m16stub6 _m16stub9 _m16stub10 \
	_m16stubsf0 _m16stubsf1 _m16stubsf2 _m16stubsf5 _m16stubsf6 \
	_m16stubsf9 _m16stubsf10 \
	_m16stubdf0 _m16stubdf1 _m16stubdf2 _m16stubdf5 _m16stubdf6 \
	_m16stubdf9 _m16stubdf10

# We must build libgcc2.a with -G 0, in case the user wants to link
# without the $gp register. Use -fno-optimize-sibling-calls in case 
# we have a mixed mips16/non-mips16 environment where a plain "jump" 
# instuction won't work across the divide (no jx instruction).

TARGET_LIBGCC2_CFLAGS = -G 0 -fno-optimize-sibling-calls

#CROSS_SYSTEM_HEADER_DIR = $(build_tooldir)/include

# Build multilibs

# XXX Are we going to support mips1 and mips3?
MULTILIB_OPTIONS = EL/EB mips32/mips32r2/mips64 mips16 msoft-float/mno-float/mfp64
MULTILIB_DIRNAMES = el eb mips32 mips32r2 mips64 mips16 sof nof f64

# Still stripped down for now, to reduce lib building load
#MULTILIB_OPTIONS = EL/EB mips32/mips32r2/mips64 msoft-float/mno-float/mfp64
#MULTILIB_DIRNAMES = el eb mips32 mips32r2 mips64 sof nof f64

# Equivalent options
MULTILIB_MATCHES = EL=mel EB=meb mips64=mips64r2 mips16=mips16e

# Match architectures which require mips32r2 libraries
MULTILIB_MATCHES    += mips32r2=march?mips32r2
MULTILIB_MATCHES    += mips32r2=march?m4k
MULTILIB_MATCHES    += mips32r2=march?m4kp
MULTILIB_MATCHES    += mips32r2=march?4kec
MULTILIB_MATCHES    += mips32r2=march?4kem
MULTILIB_MATCHES    += mips32r2=march?4kep
MULTILIB_MATCHES    += mips32r2=march?4ksd
MULTILIB_MATCHES    += mips32r2=march?24k
MULTILIB_MATCHES    += mips32r2=march?24kc
MULTILIB_MATCHES    += mips32r2=march?24kf
MULTILIB_MATCHES    += mips32r2=march?24kfx
MULTILIB_MATCHES    += mips32r2=march?24ke
MULTILIB_MATCHES    += mips32r2=march?24kec
MULTILIB_MATCHES    += mips32r2=march?24kef
MULTILIB_MATCHES    += mips32r2=march?24kefx
MULTILIB_MATCHES    += mips32r2=march?34k
MULTILIB_MATCHES    += mips32r2=march?34kc
MULTILIB_MATCHES    += mips32r2=march?34kf
MULTILIB_MATCHES    += mips32r2=march?34kfx
	
# Match architectures which require mips64 libraries
MULTILIB_MATCHES    += mips64=march?mips64
MULTILIB_MATCHES    += mips64=march?mips64r2
MULTILIB_MATCHES    += mips64=march?5kc
MULTILIB_MATCHES    += mips64=march?5kf
MULTILIB_MATCHES    += mips64=march?20kc
MULTILIB_MATCHES    += mips64=march?25kf

# Match architectures which require soft-float libraries
# XXX Sadly this doesn't work, as gcc.c only takes the first match
#     from MULTILIB_MATCHES, so each march can only be used once.
#MULTILIB_MATCHES    += msoft-float=march?m4k
#MULTILIB_MATCHES    += msoft-float=march?m4kp
#MULTILIB_MATCHES    += msoft-float=march?4kc
#MULTILIB_MATCHES    += msoft-float=march?4km
#MULTILIB_MATCHES    += msoft-float=march?4kp
#MULTILIB_MATCHES    += msoft-float=march?4kec
#MULTILIB_MATCHES    += msoft-float=march?4kem
#MULTILIB_MATCHES    += msoft-float=march?4kep
#MULTILIB_MATCHES    += msoft-float=march?4ksc
#MULTILIB_MATCHES    += msoft-float=march?4ksd
#MULTILIB_MATCHES    += msoft-float=march?24kc
#MULTILIB_MATCHES    += msoft-float=march?24kec
#MULTILIB_MATCHES    += msoft-float=march?34kc
#MULTILIB_MATCHES    += msoft-float=march?5kc
	
# List of multilib options not to be build
MULTILIB_EXCEPTIONS =

# Extra options to be used when building multilib dirs
MULTILIB_EXTRA =

# Similar to exclusions, but handles non-multilib options, and
# handled at run-time, not build-time
# The -mfp64 option is only valid in conjunction with -mips32r2
MULTILIB_EXCLUSIONS = mfp64/!mips32r2 mips16/mips64

EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o

# Build the multilibs
LIBGCC = stmp-multilib
INSTALL_LIBGCC = install-multilib

LIB2FUNCS_EXTRA = $(srcdir)/config/mips/_tilib.c

# Support for 128 bit floating point. (eg. long double) 
#TPBIT = tp-bit.c
#
#tp-bit.c: $(srcdir)/config/fp-bit.c
#	echo '#ifdef __MIPSEL__' > tp-bit.c
#	echo '# define FLOAT_BIT_ORDER_MISMATCH' >> tp-bit.c
#	echo '#endif' >> tp-bit.c
#	echo '#if __LDBL_MANT_DIG__ == 113' >> tp-bit.c
#	echo '#define QUIET_NAN_NEGATED' >> dp-bit.c
#	echo '# define TFLOAT' >> tp-bit.c
#	cat $(srcdir)/config/fp-bit.c >> tp-bit.c
#	echo '#endif' >> tp-bit.c
