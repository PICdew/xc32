#   Copyright 2006 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@prep.ai.mit.edu

if $tracelevel then {
    strace $tracelevel
}

#
# test running programs
#
set prms_id 0
set bug_id 0

set testfile "mdi-team"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}

if {(![target_info exists gdb,teams]) || ([target_info gdb,teams] == 0)} {
    verbose "Skipping teams compilation"
    return -1
}

if  { [gdb_compile_pthreads "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug additional_flags=-Wl,--defsym,_smtc=_smtc_enable}] != "" } {
    gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

set old_target_info "[target_info gdb_serial]"
regexp {^([0-9]+):([0-9]+)} ${old_target_info} tm_this tm_this_tg tm_this_dev
regexp {^([0-9]+):([0-9]+)} [target_info gdb,tm_other] tm_other tm_other_tg tm_other_dev
regexp {^[0-9]+:[0-9]+(.*)} ${old_target_info} [] gdb_serial_rest

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

if { ! [ runto_main ] } then {
    gdb_suppress_entire_file "Run to main failed, so all tests in this file will automatically fail."
}

set tm_id x

gdb_test "mdi team" "MDI team number is 0\\." "default MDI team (1)"
gdb_test "show mdi team" "MDI team number is 0\\." "show default MDI team"
set test "initial MDI team list"
set command "mdi team list"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}

set test "there is no MDI team"
set command "mdi team list"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}

set test "attach the opened device"
set command "mdi team attach ${tm_this}"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}

set test "created MDI team"
gdb_test_multiple "mdi team" "$test" {
    -re "\[\r\n\]*MDI team number is (\[0-9\]+)\\.\r\n$gdb_prompt $" {
	set tm_id "$expect_out(1,string)"
	pass "$test (= $tm_id)"
    }
}
gdb_test "show mdi team" "MDI team number is ${tm_id}\\." "show created MDI team"

set test "MDI team consists of the opened device"
gdb_test_multiple "mdi team list" "$test" {
    -re "\[\r\n\]*Team 0*${tm_id}:\r\n *Dev 0*${tm_this_tg}:0*${tm_this_dev}\r\n$gdb_prompt $" {
	pass "$test"
    }
}

set test "attach the other device"
set command "mdi team attach ${tm_other}"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}
set test "MDI team contains both devices (1)"
gdb_test_multiple "mdi team list" "$test" {
    -re "\[\r\n\]*Team 0*${tm_id}:\r\n *Dev 0*${tm_this_tg}:0*${tm_this_dev}\r\n *Dev 0*${tm_other_tg}:0*${tm_other_dev}\r\n$gdb_prompt $" {
	pass "$test"
    }
    -re "\[\r\n\]*Team 0*${tm_id}:\r\n *Dev 0*${tm_other_tg}:0*${tm_other_dev}\r\n *Dev 0*${tm_this_tg}:0*${tm_this_dev}\r\n$gdb_prompt $" {
	pass "$test"
    }
}

set test "detach the opened device"
set command "mdi team detach ${tm_this}"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}
set test "MDI team consists of the other device"
gdb_test_multiple "mdi team list" "$test" {
    -re "\[\r\n\]*Team 0*${tm_id}:\r\n *Dev 0*${tm_other_tg}:0*${tm_other_dev}\r\n$gdb_prompt $" {
	pass "$test"
    }
}

set test "detach the other device (1)"
set command "mdi team detach ${tm_other}"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}
set test "MDI team is empty"
gdb_test_multiple "mdi team list" "$test" {
    -re "\[\r\n\]*Team 0*${tm_id}:\r\n$gdb_prompt $" {
	pass "$test"
    }
}

set test "attach both devices"
set command "mdi team attach ${tm_other} ${tm_this}"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}
set test "MDI team contains both devices (2)"
gdb_test_multiple "mdi team list" "$test" {
    -re "\[\r\n\]*Team 0*${tm_id}:\r\n *Dev 0*${tm_this_tg}:0*${tm_this_dev}\r\n *Dev 0*${tm_other_tg}:0*${tm_other_dev}\r\n$gdb_prompt $" {
	pass "$test"
    }
    -re "\[\r\n\]*Team 0*${tm_id}:\r\n *Dev 0*${tm_other_tg}:0*${tm_other_dev}\r\n *Dev 0*${tm_this_tg}:0*${tm_this_dev}\r\n$gdb_prompt $" {
	pass "$test"
    }
}

set test "clear the MDI team (1)"
set command "mdi team clear"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}
set test "there is no MDI team (1)"
set command "mdi team list"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}

gdb_test "mdi team" "MDI team number is 0\\." "default MDI team (2)"

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

unset_currtarget_info gdb_serial
set_currtarget_info gdb_serial "${tm_this},team=${tm_other}${gdb_serial_rest}"

if { ! [ runto_main ] } then {
    gdb_suppress_entire_file "Run to main failed, so all tests in this file will automatically fail."
}

set num_threads -1

set test "get the number of threads"
gdb_test_multiple "print sizeof(args) / sizeof(*args)" "$test" {
    -re "\[\r\n\]*\\$\[0-9\]+ *= *(\[0-9\]+)\r\n$gdb_prompt $" {
	set num_threads "$expect_out(1,string)"
	pass "$test (= $num_threads)"
    }
}

set tm_id x

set test "open-time created MDI team"
gdb_test_multiple "mdi team" "$test" {
    -re "\[\r\n\]*MDI team number is (\[0-9\]+)\\.\r\n$gdb_prompt $" {
	set tm_id "$expect_out(1,string)"
	pass "$test (= $tm_id)"
    }
}
gdb_test "show mdi team" "MDI team number is ${tm_id}\\." "show open-time created MDI team"
set test "open-time created MDI team list"
gdb_test_multiple "mdi team list" "$test" {
    -re "\[\r\n\]*Team 0*${tm_id}:\r\n *Dev 0*${tm_this_tg}:0*${tm_this_dev}\r\n *Dev 0*${tm_other_tg}:0*${tm_other_dev}\r\n$gdb_prompt $" {
	pass "$test"
    }
    -re "\[\r\n\]*Team 0*${tm_id}:\r\n *Dev 0*${tm_other_tg}:0*${tm_other_dev}\r\n *Dev 0*${tm_this_tg}:0*${tm_this_dev}\r\n$gdb_prompt $" {
	pass "$test"
    }
}

gdb_test "thbreak [gdb_get_line_number "Loop increment"]" \
        "Hardware assisted breakpoint.*at.* file .*$srcfile, line.*" \
        "break in the loop"
gdb_test "continue" \
        "thread_function .* at .*:.*myp.*Loop increment.*" \
        "skip to the loop"

for {set i 0} {$i < $num_threads} {incr i} {
    set test "get the counter $i (1)"
    gdb_test_multiple "print args\[$i\]" "$test" {
	-re "\[\r\n\]*\\$\[0-9\]+ *= *(\[0-9\]+)\r\n$gdb_prompt $" {
	    set count_0($i) $expect_out(1,string)
	    pass "$test (= $count_0($i))"
	}
    }
}
sleep 2
for {set i 0} {$i < $num_threads} {incr i} {
    set test "get the counter $i (2)"
    gdb_test_multiple "print args\[$i\]" "$test" {
	-re "\[\r\n\]*\\$\[0-9\]+ *= *(\[0-9\]+)\r\n$gdb_prompt $" {
	    set count_1($i) $expect_out(1,string)
	    pass "$test (= $count_1($i))"
	}
    }
    set c [expr $count_1($i) - $count_0($i)]
    if {$c == 0} {
	pass "the counter $i has not changed"
    } else {
	fail "the counter $i has changed (by $c)"
    }
}
sleep 2
for {set i 0} {$i < $num_threads} {incr i} {
    set test "get the counter $i (3)"
    gdb_test_multiple "print args\[$i\]" "$test" {
	-re "\[\r\n\]*\\$\[0-9\]+ *= *(\[0-9\]+)\r\n$gdb_prompt $" {
	    set count_2($i) $expect_out(1,string)
	    pass "$test (= $count_2($i))"
	}
    }
    set c [expr $count_2($i) - $count_1($i)]
    if {$c == 0} {
	pass "the counter $i has not changed"
    } else {
	fail "the counter $i has changed (by $c)"
    }
}

set test "start free running"
gdb_test_multiple "continue" "$test" {
    -re "\[\r\n\]*Continuing\\.\r\n" {
	pass "$test"
    }
}
sleep 2
send_gdb "\003"
gdb_test "" ".*Program received signal SIGINT.*" "stop"

for {set i 0} {$i < $num_threads} {incr i} {
    set test "get the counter $i (4)"
    gdb_test_multiple "print args\[$i\]" "$test" {
	-re "\[\r\n\]*\\$\[0-9\]+ *= *(\[0-9\]+)\r\n$gdb_prompt $" {
	    set count_3($i) $expect_out(1,string)
	    pass "$test (= $count_3($i))"
	}
    }
    set c [expr $count_3($i) - $count_2($i)]
    if {$c != 0} {
	pass "the counter $i has changed (by $c)"
    } else {
	fail "the counter $i has not changed"
    }
}

set test "detach the other device (2)"
set command "mdi team detach ${tm_other}"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}
set test "MDI team consists of the opened device"
gdb_test_multiple "mdi team list" "$test" {
    -re "\[\r\n\]*Team 0*${tm_id}:\r\n *Dev 0*${tm_this_tg}:0*${tm_this_dev}\r\n$gdb_prompt $" {
	pass "$test"
    }
}

set test "clear the MDI team (2)"
set command "mdi team clear"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}
set test "there is no MDI team (2)"
set command "mdi team list"
gdb_test_multiple "$command" "$test" {
    -re "\[\r\n\]*$command\r\n$gdb_prompt $" {
	pass "$test"
    }
}

sleep 2
set changed 0
for {set i 0} {$i < $num_threads} {incr i} {
    set test "get the counter $i (5)"
    gdb_test_multiple "print args\[$i\]" "$test" {
	-re "\[\r\n\]*\\$\[0-9\]+ *= *(\[0-9\]+)\r\n$gdb_prompt $" {
	    set count_4($i) $expect_out(1,string)
	    pass "$test (= $count_4($i))"
	}
    }
    set c [expr $count_4($i) - $count_3($i)]
    if {$c != 0} {
	set changed 1
    }
}
if {$changed != 0} {
	pass "at least one counter has changed (1)"
} else {
	fail "no counter has changed (1)"
}
sleep 2
set changed 0
for {set i 0} {$i < $num_threads} {incr i} {
    set test "get the counter $i (6)"
    gdb_test_multiple "print args\[$i\]" "$test" {
	-re "\[\r\n\]*\\$\[0-9\]+ *= *(\[0-9\]+)\r\n$gdb_prompt $" {
	    set count_5($i) $expect_out(1,string)
	    pass "$test (= $count_5($i))"
	}
    }
    set c [expr $count_5($i) - $count_4($i)]
    if {$c != 0} {
	set changed 1
    }
}
if {$changed != 0} {
	pass "at least one counter has changed (2)"
} else {
	fail "no counter has changed (2)"
}
sleep 2

unset_currtarget_info gdb_serial
set_currtarget_info gdb_serial ${old_target_info}
